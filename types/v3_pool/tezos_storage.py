# generated by datamodel-codegen:
#   filename:  storage.json

from __future__ import annotations

from typing import Any, Dict, List, Union

from pydantic import BaseModel, ConfigDict


class TokenXItem(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )

    fa12: str


class Fa2(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )

    token_id: str
    token_address: str


class TokenXItem1(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )

    fa2: Fa2


class TokenYItem(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )

    fa12: str


class Fa21(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )

    token_id: str
    token_address: str


class TokenYItem1(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )

    fa2: Fa21


class Constants(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )

    factory_address: str
    fee_bps: str
    tick_spacing: str
    token_x: Union[TokenXItem, TokenXItem1]
    token_y: Union[TokenYItem, TokenYItem1]


class Spl(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )

    block_start_liquidity_value: str
    sum: str


class Tick(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )

    block_start_value: str
    sum: str


class Map(BaseModel):

    model_config = ConfigDict(
        extra='allow',
    )

    spl: Spl
    tick: Tick
    time: str


class CumulativesBuffer(BaseModel):

    model_config = ConfigDict(
        extra='allow',
    )

    first: str
    last: str
    map: Dict[str, Map]
    reserved_length: str


class DevFee(BaseModel):

    model_config = ConfigDict(
        extra='allow',
    )

    x: str
    y: str


class FeeGrowth(BaseModel):

    model_config = ConfigDict(
        extra='allow',
    )

    x: str
    y: str


class Key(BaseModel):

    model_config = ConfigDict(
        extra='allow',
    )

    exp: str
    positive: bool


class Value(BaseModel):

    model_config = ConfigDict(
        extra='allow',
    )

    offset: str
    v: str


class LadderItem(BaseModel):

    model_config = ConfigDict(
        extra='allow',
    )

    key: Key
    value: Value


class Key1(BaseModel):

    model_config = ConfigDict(
        extra='allow',
    )

    owner: str
    operator: str
    token_id: str


class Operator(BaseModel):

    model_config = ConfigDict(
        extra='allow',
    )

    key: Key1
    value: Dict[str, Any]


class FeeGrowthInsideLast(BaseModel):

    model_config = ConfigDict(
        extra='allow',
    )

    x: str
    y: str


class Positions(BaseModel):

    model_config = ConfigDict(
        extra='allow',
    )

    fee_growth_inside_last: FeeGrowthInsideLast
    liquidity: str
    lower_tick_index: str
    owner: str
    upper_tick_index: str


class FeeGrowthOutside(BaseModel):

    model_config = ConfigDict(
        extra='allow',
    )

    x: str
    y: str


class Ticks(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )

    fee_growth_outside: FeeGrowthOutside
    liquidity_net: str
    n_positions: str
    next: str
    prev: str
    seconds_outside: str
    seconds_per_liquidity_outside: str
    sqrt_price: str
    tick_cumulative_outside: str


class TokenMetadata(BaseModel):

    model_config = ConfigDict(
        extra='allow',
    )

    token_id: str
    token_info: Dict[str, str]


class V3PoolStorage(BaseModel):

    model_config = ConfigDict(
        extra='allow',
    )

    constants: Constants
    cumulatives_buffer: CumulativesBuffer
    cur_tick_index: str
    cur_tick_witness: str
    dev_fee: DevFee
    fee_growth: FeeGrowth
    ladder: List[LadderItem]
    liquidity: str
    metadata: Dict[str, str]
    new_position_id: str
    operators: List[Operator]
    position_ids: Dict[str, List[str]]
    positions: Dict[str, Positions]
    sqrt_price: str
    ticks: Dict[str, Ticks]
    token_metadata: Dict[str, TokenMetadata]

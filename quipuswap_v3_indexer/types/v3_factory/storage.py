# generated by datamodel-codegen:
#   filename:  storage.json

from __future__ import annotations

from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, Extra


class PauseStateItem(BaseModel):
    class Config:
        extra = Extra.forbid

    set_position_pause: Dict[str, Any]


class PauseStateItem1(BaseModel):
    class Config:
        extra = Extra.forbid

    update_position_pause: Dict[str, Any]


class PauseStateItem2(BaseModel):
    class Config:
        extra = Extra.forbid

    x_to_y_pause: Dict[str, Any]


class PauseStateItem3(BaseModel):
    class Config:
        extra = Extra.forbid

    y_to_x_pause: Dict[str, Any]


class TokenXItem(BaseModel):
    class Config:
        extra = Extra.forbid

    fa12: str


class Fa2(BaseModel):
    class Config:
        extra = Extra.forbid

    token_id: str
    token_address: str


class TokenXItem1(BaseModel):
    class Config:
        extra = Extra.forbid

    fa2: Fa2


class TokenYItem(BaseModel):
    class Config:
        extra = Extra.forbid

    fa12: str


class Fa21(BaseModel):
    class Config:
        extra = Extra.forbid

    token_id: str
    token_address: str


class TokenYItem1(BaseModel):
    class Config:
        extra = Extra.forbid

    fa2: Fa21


class Key(BaseModel):
    class Config:
        extra = Extra.forbid

    fee_bps: str
    token_x: Union[TokenXItem, TokenXItem1]
    token_y: Union[TokenYItem, TokenYItem1]


class PoolId(BaseModel):
    class Config:
        extra = Extra.forbid

    key: Key
    value: str


class V3FactoryStorage(BaseModel):
    class Config:
        extra = Extra.forbid

    dev_fee_bps: str
    owner: str
    pause_state: List[
        Union[PauseStateItem, PauseStateItem1, PauseStateItem2, PauseStateItem3]
    ]
    pending_owner: Optional[str]
    pool_count: str
    pool_ids: List[PoolId]
    pools: Dict[str, str]
